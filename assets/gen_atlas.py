#!/usr/bin/env python3

import sys
import json


TEMPLATE = r"""
# This file is generated by [gen_atlas.py]

import enum

RECTS = [
    # x,       y,         w,         h
    BUFFER
]

class Sprite(enum.Enum):
    ENUM
"""


def rect(image, w, h):
    frame = image["frame"]
    r = [frame[x] / (w, h)[i % 2]
              for i, x in enumerate("x y w h".split())]
    r[1] = 1. - r[1] - r[3]
    r = [f"{x :.7}," for x in r]
    return ("{:<10} "*4).format(*r)


def python_enum_name(name: str):
    name = name \
        .partition(".")[0] \
        .upper()

    return name


def main():
    assert len(sys.argv) == 2, "This script requires exactly 1 argument"

    with open(sys.argv[1]) as f:
        j = json.load(f)
    frames: dict = j["frames"]

    # size
    width = j["meta"]["size"]["w"]
    height = j["meta"]["size"]["h"]

    # buffer
    buffer = [
        rect(image, width, height) for image in frames.values()
    ]
    buffer_sep = "\n" + " " * 4  # one tabs
    buffer_str = buffer_sep.join(buffer)

    # enum
    enum_sep = "\n" + " " * 4  # one tab
    enum_str = enum_sep.join(
        f"{python_enum_name(name)} = {i}"
        for (i, name) in enumerate(frames)
    )


    rust = TEMPLATE \
        .replace("BUFFER", buffer_str) \
        .replace("ENUM", enum_str)

    print(rust)


if __name__ == '__main__':
    main()
